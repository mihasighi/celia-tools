# Makefile
#
# CELIA Tools / Utilities for Abstract Domains
#
# Copyright (C) LIAFA 2009-2014

# This file is part of the CELIA tool, released under LGPL license.
# Please read the LICENSE file packaged in the distribution.

include Makefile.config

PREFIX = ../

# C include and lib directories
INCDIR = $(PREFIX)/include
LIBDIR = $(PREFIX)/lib
BINDIR = $(PREFIX)/bin

SRCDIR = $(shell pwd)

#---------------------------------------
# Programs
#---------------------------------------

# Library creation
SHARED = $(CC) -shared

#---------------------------------------
# Flags
#---------------------------------------

# Use ICFLAGS to specify machine-independent compilation flags.
ICFLAGS = \
-I$(MPFR_PREFIX)/include \
-I$(GMP_PREFIX)/include \
-I$(CAML_PREFIX)/lib/ocaml \
-I$(CAMLIDL_PREFIX)/lib/ocaml \
-I$(MLGMPIDL_PREFIX)/include \
-I$(APRON_CCINC) \
-I$(APRON_OCINC) 

# Caml
OCAMLINC = \
-I $(MLGMPIDL_PREFIX)/include \
-I $(APRON_OCINC) \

#---------------------------------------
# Files
#---------------------------------------

AP2SH_CCSOURCES = ap_pcons0.c ap_passign0.c apron2shape.c 

AP2SH_CCINC = apron2shape.h ap_pcons0.h ap_passign0.h

CCSOURCES = $(AP2SH_CCSOURCES) 

CCINC = sh_macros.h $(AP2SH_CCINC) 

# trigers a whole recompilation
#DEPS = $(APRON_INCLUDE)/ap_abstract0.h

#---------------------------------------
# Rules
#---------------------------------------

root:
	@echo
	@echo "Please choose a target from:"
	@echo
	@echo " Sl                      : single C library"
	@echo " all                     : all C libraries"
	@echo " ml                      : OCaml library"
	@echo " allml                   : everything"
	@echo " install                 : to install what has been compiled"
	@echo " indent                  : to indent C sources"
	@echo " clean                   : remove objects"
	@echo " distclean               : clean & uninstall"
	@echo " mostyleclean            : remove objects & autogenerated"
	@echo " rebuild                 : rebuild autogenerated "
	@echo

all: Sl
ifeq ($(DEBUG),_debug)
	ln -f -s libap2sh$(DEBUG).so libap2sh.so
	ln -f -s libap2sh$(DEBUG).a libap2sh.a
endif

allml: ml


Sl: libap2sh$(DEBUG).so libap2sh$(DEBUG).a
	
    
alltest: ap2shtest

clean:
	/bin/rm -f *.[ao] ap2shtest*
	/bin/rm -f *.?.tex *.log *.aux *.bbl *.blg *.toc *.dvi *.ps *.pstex*
	/bin/rm -fr *.cm[ioax] *.cmxa
	/bin/rm -fr *~ 

mostlyclean: clean
	/bin/rm -fr *_caml.c *.mli

#TODO: (un)install other dynlib also
install:
	$(INSTALLd) $(INCDIR) $(INCDIR)/shape $(LIBDIR) $(BINDIR)
	$(INSTALL) shape.h $(INCDIR)
	$(INSTALL) $(CCINC) $(INCDIR)/shape
	for i in libshape*.* libshape*_debug.* libshape_caml.* shape.idl; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done
	for i in shapetest?? shapetop?? shaperun??; do \
		if test -f $$i; then $(INSTALL) $$i $(BINDIR); fi; \
	done
	for i in shape.mli shape.cmi shape.cma shape.cmxa shape.a; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done

uninstall:
	/bin/rm -fr $(INCDIR)/shape
	/bin/rm -f $(BINDIR)/shapetest?? $(BINDIR)/shapetop?? $(BINDIR)/shaperun??
	/bin/rm -f $(LIBDIR)/libshape*.* $(LIBDIR)/libshape*_debug.* $(LIBDIR)/libshape_caml.a
	/bin/rm -f $(LIBDIR)/shape.mli $(LIBDIR)/shape.cmi $(LIBDIR)/shape.idl $(LIBDIR)/shape.cma $(LIBDIR)/shape.cmxa $(LIBDIR)/shape.a
	/bin/rm -f Makefile.depend

distclean: uninstall
	/bin/rm -f Makefile.depend

indent: $(CCSOURCES) $(CCINC)
	for i in $(CCSOURCES) $(CCINC); do \
		echo "* indent $$i"; indent -bl -i2 -nut $$i; \
	done

#-----------------------------------
# C part
#-----------------------------------

APRON_LIBS = \
-lapron$(DEBUG) 

SHARED_LIBS = \
$(APRON_LIBS) 

AP2SH_OBJS = $(subst .c,$(DEBUG).o,$(CCSOURCES)) 

AP2SH_LIBS = \
-lap2sh$(DEBUG) 

LDFLAGS = \
-L$(APRON_LIB) 

LDLIBS = $(AP2SH_LIBS)
#Warning: do not put APRON_LIBS because already put in by frama-c


# shape_*
#
libap2sh.a: $(subst .c,.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libap2sh_debug.a: $(subst .c,_debug.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libap2sh.so: $(subst .c,.o,$(CCSOURCES))
	$(SHARED) $(LDFLAGS) $(SHARED_LIBS) -o $@ $^

libap2sh_debug.so: $(subst .c,_debug.o,$(CCSOURCES))
	$(SHARED) $(LDFLAGS) $(SHARED_LIBS) -o $@ $^ 

ap2shtest: libap2sh_debug.so ap2sh_test_debug.o
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ ap2sh_test_debug.o \
	$(LDFLAGS) \
	$(SHARED_LIBS)

#---------------------------------------
# IMPLICIT RULES AND DEPENDENCIES
#---------------------------------------

.SUFFIXES: .c .h .a .o .so 


%_caml.o: %_caml.c $(CCINC) $(DEPS) lib%.a
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<

.PRECIOUS: libap2sh%.a libap2sh%_debug.a libap2sh%.so


#-----------------------------------
# Caml part
#-----------------------------------

#---------------------------------------
# IDL rules
#---------------------------------------

#---------------------------------------
# ML generic rules
#---------------------------------------

#-----------------------------------
# DEPENDENCIES
#-----------------------------------

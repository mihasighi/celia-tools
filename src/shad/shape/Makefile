# Makefile
#
# CELIA Tools / Shape Abstract Domain
#
# This file is part of the CELIA tool, released under LGPL license.
# Please read the COPYING file packaged in the distribution.

include Makefile.config

PREFIX = ../..

# C include and lib directories
INCDIR = $(PREFIX)/include
LIBDIR = $(PREFIX)/lib
BINDIR = $(PREFIX)/bin

SRCDIR = $(shell pwd)

#---------------------------------------
# Programs
#---------------------------------------

# Library creation
SHARED = $(CC) -shared

#---------------------------------------
# Flags
#---------------------------------------

# Use ICFLAGS to specify machine-independent compilation flags.
ICFLAGS = \
-I$(MPFR_PREFIX)/include \
-I$(GMP_PREFIX)/include \
-I$(CAML_PREFIX)/lib/ocaml \
-I$(CAMLIDL_PREFIX)/lib/ocaml \
-I$(MLGMPIDL_PREFIX)/include \
-I$(APRON_CCINC) \
-I$(APRON_OCINC) \
-I$(PREFIX)/utils \
-I$(PREFIX)/shad/shad \
-I$(PREFIX)/shad/sll \
-I$(PREFIX)/arad/lsum \
-I$(PREFIX)/slad

# Caml
OCAMLINC = \
-I $(MLGMPIDL_PREFIX)/include \
-I $(APRON_OCINC)

#---------------------------------------
# Files
#---------------------------------------

SHAD_CCSOURCES = ap_pcons0.c ap_passign0.c \
	apron2shape.c apron2smtlib.c shad.c sl3shad.c sl3.c smtlib2sl3.c 

SHAD_CCINC = sh_manager.h sh_options.h \
	smtlib2sl3.h sl3shad.h sl3.h shad.h \
	apron2shape.h ap_pcons0.h ap_passign0.h

ADOM_CCSOURCES = adom_print.c adom_transfer.c adom_closure.c adom_nary.c \
	adom_representation.c adom_predicate.c adom_resize.c

ADOM_CCINC = adom.h adom_internal.h adom_fun.h 

USHAPE_CCINC = $(subst adom,ushape,$(ADOM_CCINC))

USHAPE_CCSOURCES = $(subst adom,ushape,$(ADOM_CCSOURCES))
    
SHAPE_CCINC = $(subst adom,shape,$(ADOM_CCINC))

SHAPE_CCSOURCES = $(USHAPE_CCSOURCES) \
	$(subst adom,shape,$(ADOM_CCSOURCES))

CCINC = $(USHAPE_CCINC) \
	$(SHAPE_CCINC)

CCSOURCES = $(USHAPE_CCSOURCES) \
	$(SHAPE_CCSOURCES)


#---------------------------------------
# Rules
#---------------------------------------

root:
	@echo
	@echo "Please choose a target from:"
	@echo
	@echo " all                     : all C libraries"
	@echo " ml                      : OCaml library"
	@echo " allml                   : everything"
	@echo " install                 : to install what has been compiled"
	@echo " indent                  : to indent C sources"
	@echo " clean                   : remove objects"
	@echo " distclean               : clean & uninstall"
	@echo " mostyleclean            : remove objects & autogenerated"
	@echo " rebuild                 : rebuild autogenerated "
	@echo

all: libshape$(DEBUG).so libshape$(DEBUG).a
ifeq ($(DEBUG),_debug)
	ln -f -s libshape$(DEBUG).so libshape.so
	ln -f -s libshape$(DEBUG).a libshape.a
endif

allml: ml

clean:
	/bin/rm -f *.[ao] shapetest* 
	/bin/rm -f *.?.tex *.log *.aux *.bbl *.blg *.toc *.dvi *.ps *.pstex*
	/bin/rm -fr *.cm[ioax] *.cmxa
	/bin/rm -fr *~ \#*\# *.BAK f_*.shp

mostlyclean: clean
	/bin/rm -fr *_caml.c *.mli

#TODO: (un)install other dynlib also
install:
	$(INSTALLd) $(INCDIR) $(INCDIR)/shape $(LIBDIR) $(BINDIR)
	$(INSTALL) shape.h $(INCDIR)
	$(INSTALL) $(CCINC) $(INCDIR)/shape
	for i in libshape*.* libshape*_debug.* libshape_caml.* shape.idl; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done
	for i in shapetest?? shapetop?? shaperun??; do \
		if test -f $$i; then $(INSTALL) $$i $(BINDIR); fi; \
	done
	for i in shape.mli shape.cmi shape.cma shape.cmxa shape.a; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done

uninstall:
	/bin/rm -fr $(INCDIR)/shape
	/bin/rm -f $(BINDIR)/shapetest?? $(BINDIR)/shapetop?? $(BINDIR)/shaperun??
	/bin/rm -f $(LIBDIR)/libshape*.* $(LIBDIR)/libshape*_debug.* $(LIBDIR)/libshape_caml.a
	/bin/rm -f $(LIBDIR)/shape.mli $(LIBDIR)/shape.cmi $(LIBDIR)/shape.idl $(LIBDIR)/shape.cma $(LIBDIR)/shape.cmxa $(LIBDIR)/shape.a
	/bin/rm -f Makefile.depend

distclean: uninstall
	/bin/rm -f Makefile.depend

indent: $(CCSOURCES) $(CCINC)
	for i in $(CCSOURCES) $(CCINC); do \
		echo "* indent $$i"; indent -nut $$i; \
	done

#-----------------------------------
# C part
#-----------------------------------

APRON_LIBS = \
-lap2sh$(DEBUG) \
-lapron$(DEBUG) \
-lboxD \
-loctD \
-lpolkaRll$(DEBUG) \
-lap_ppl$(DEBUG) \
-lppl$(DEBUG)

SHARED_LIBS = -lsmtlib2parser \
	$(APRON_LIBS) \
	-lmpfr \
	-lgmp \
	-lm

SHAPE_OBJS = $(subst .c,$(DEBUG).o,$(CCSOURCES)) 

SHAPE_LIBS = \
-lshape$(DEBUG) 

DW_LIBS = \
-llsum$(DEBUG) \
-lmset$(DEBUG) \
-lucons$(DEBUG) 

LDFLAGS = -L$(GMP_PREFIX)/lib \
	-L$(MPFR_PREFIX)/lib \
	-L$(APRON_PREFIX)/lib \
	-L$(SMTLIB2_PREFIX) \
	-L$(CELIA)/shapes

LDLIBS = $(SHAPE_LIBS) $(DW_LIBS)
#Warning: do not put APRON_LIBS because already put in by frama-c


# shape_*
#
libshape.a: $(subst .c,.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape_debug.a: $(subst .c,_debug.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape.so: $(subst .c,.o,$(SHAPE_CCSOURCES))
	$(SHARED) $(LDFLAGS) $(DW_LIBS) $(SHARED_LIBS) -o $@ $^

libshape_debug.so: $(subst .c,_debug.o,$(SHAPE_CCSOURCES))
	$(SHARED) $(LDFLAGS) $(DW_LIBS) $(SHARED_LIBS) -o $@ $^ 

shapetest: libshape_debug.so shape_test_debug.o
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ shape_test_debug.o \
	$(LDFLAGS) \
	$(SHAPE_LIBS) $(DW_LIBS) $(SHARED_LIBS)


#---------------------------------------
# IMPLICIT RULES AND DEPENDENCIES
#---------------------------------------

.SUFFIXES: .tex .c .h .a .o .so .y .l


%_caml.o: %_caml.c $(CCINC) $(DEPS) lib%.a
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%_debug.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -c -o $@ $<

%bisonparser.c: %bisonparser.y %flexlexer.c
	$(BISON) -o $@ $<

%flexlexer.c: %flexlexer.l
	$(FLEX) --header-file=$%"flexlexer.h" -o $@ $<

.PRECIOUS: libshape%.a libshape%_debug.a libshape%.so


#-----------------------------------
# Caml part
#-----------------------------------

ml: shape.mli shape.cmi shape.cma shape.cmxa libshape_caml.a

shape.cma: shape.cmi shape.cmo libshape_caml.a
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -custom -a -o $@ \
	shape.cmo \
	-ccopt "$(LDFLAGS)" -cclib "$(LDLIBS)"  -cclib "-lshape_caml"

shape.cmxa shape.a: shape.cmi shape.cmx libshape_caml.a
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -a -o $@ \
	shape.cmx \
	-ccopt "$(LDFLAGS)" -cclib "$(LDLIBS)"  -cclib "-lshape_caml"
	$(RANLIB) shape.a

libshape_caml.a: shape_caml$(DEBUG).o 
	$(AR) rcs $@ $^
	$(RANLIB) $@

libshape_caml.so: shape_caml$(DEBUG).o
	$(SHARED) $(LDFLAGS) $(LDLIBS) -o $@ $^

#TODO: see if useful and if it works
mltest: mltest.ml shape.cma
	$(OCAMLC) -I $(APRON_PREFIX)/lib -I $(SMTLIB2_PREFIX) -I . gmp.cma apron.cma shape.cma mltest.ml \
	-cclib -lshape -cclib -lapron

#---------------------------------------
# IDL rules
#---------------------------------------


# generates XXX.ml, XXX.mli, XXX_caml.c from XXX.idl
rebuild: shape.idl
	mkdir -p tmp
	cp $(APRON_PREFIX)/apron/mlapronidl/*.idl tmp
	cp *.idl tmp/
	for i in shape; do \
		cd tmp ; $(CAMLIDL) -no-include -nocpp -I . $$i.idl ; cd ../ ; \
		$(SED) -f sedscript_caml tmp/$$i.ml >$$i.ml ; \
		$(SED) -f sedscript_caml tmp/$$i.mli >$$i.mli ; \
		$(SED) -f sedscript_c tmp/$$i_stubs.c >$$i_caml.c ; \
        done

.PRECIOUS: %_caml.c %.ml %.mli %.cmi libshape%_caml.a libshape%_caml.so shape.cmx shape.cmo

#---------------------------------------
# ML generic rules
#---------------------------------------

%.cmi: %.mli  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmo: %.ml %.cmi  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmx: %.ml %.cmi  $(DEPS)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -c $<



#-----------------------------------
# DEPENDENCIES
#-----------------------------------

/* -*- mode: c -*- */

/*
 * ushape.idl
 *
 * OCaml interface specification for camlidl
 *
 * CELIA Tools / Shape Absytract Domain    
 *
 * This file is part of the CELIA Tools, released under LGPL license.
 * Please read the COPYING file packaged in the distribution.
 */

quote(C,"/*\n This file is part of the CELIA Tools, released under LGPL license.\n Please read the COPYING file packaged in the distribution.\n*/")
quote(MLMLI,"(*\n This file is part of the APRON Library, released under LGPL license.\n Please read the COPYING file packaged in the distribution.\n*)")

quote(MLI,"\n \n(** Shape abstract domain. *)\n \n")

quote(C,"#include \"ushape.h\"")
quote(C,"#include \"apron_caml.h\"")

quote(C,"#define I0_CHECK_EXC(man) if (man->result.exn!=AP_EXC_NONE){ value v = camlidl_c2ml_manager_struct_ap_exclog_t(man->result.exclog,_ctx); caml_raise_with_arg(*caml_named_value(\"apron exception\"),v); } ")


quote(C,"typedef struct shape_internal_t* internal_ptr;")

import "generator0.idl";
import "abstract0.idl";
import "scalar.idl";
import "manager.idl";

typedef [abstract] struct shape_internal_t* internal_ptr;

quote(MLMLI,"\n \n\
type t\n\
  (** Type of ushapes.\n\n\
      Hgraphs are defined by conjunctions of equalities of the form\n\
      x ====> y  \n\
    Abstract values which are ushapes have the type [t Apron.AbstractX.t].\n\n\
    Managers allocated for ushapes have the type [t Apron.manager.t].\n\
  *)\n\n \
")

quote(MLI,"(** Allocate a new manager to manipulate ushapes. *)")
ap_manager_ptr ushape_manager_alloc(void);

quote(MLI,"\n\n(**
{2 Compilation information}

{3 Bytecode compilation}
To compile to bytecode, you should first generate a custom interpreter with a
command which should look like:

[ocamlc -I $APRON_PREFIX/lib -make-runtime -o myrun bigarray.cma gmp.cma apron.cma ushape.cma]

and then you compile and link your example [X.ml] with

[ocamlc -I $APRON_PREFIX/lib -c X.ml] and

[ocamlc -I $APRON_PREFIX/lib -use-runtime myrun -o X bigarray.cma gmp.cma apron.cma ushape.cma X.cmo]

{b Comments:} The C libraries related to [gmp.cma] and [apron.cma] are
automatically looked for (thanks to the auto-linking feature provided by
[ocamlc]).  For [ushape.cma], the library [libushape.a] is
selected by default. The [-noautolink] option should be used to select a
different version. See the C documentation of [Shape] library for details.

With the [-noautolink] option, the generation of the custom runtime executable
should be done with

[ocamlc -I $APRON_PREFIX/lib -noautolink -make-runtime -o myrun bigarray.cma gmp.cma apron.cma ushape.cma -ccopt \"-L$GMP_PREFIX/lib ...\" -cclib \"-lushape_caml -loct_caml -lapron_caml -lapron -lgmp_caml -lmpfr -lgmp -lbigarray -lcamlidl\"]

{3 Native-code compilation}
You compile and link with

[ocamlopt -I $APRON_PREFIX/lib -c X.ml] and

[ocamlopt -I $APRON_PREFIX/lib -o X bigarray.cmxa gmp.cmxa apron.cmxa ushape.cmxa X.cmx]

{b Comments:} Same as for bytecode compilation. With the
[-noautolink] option, the linking command becomes

[ocamlopt -I $APRON_PREFIX/lib -o X bigarray.cmxa gmp.cmxa apron.cmxa ushape.cmxa -ccopt \"-L$GMP_PREFIX/lib ...\" -cclib \"-lushape_caml -loct_caml -lapron_caml -lapron -lgmp_caml -lmpfr -lgmp -lbigarray -lcamlidl\" X.cmx]
*)")
